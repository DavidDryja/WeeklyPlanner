{"ast":null,"code":"import _classCallCheck from \"/Users/bryced/repos/WeeklyPlanner/planner/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/bryced/repos/WeeklyPlanner/planner/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/bryced/repos/WeeklyPlanner/planner/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/bryced/repos/WeeklyPlanner/planner/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/bryced/repos/WeeklyPlanner/planner/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/bryced/repos/WeeklyPlanner/planner/src/components/HelloWorld.js\";\nimport React from 'react'; // This is a stateful component because you can assign this.state a value in the contructor\n// then later on whenever your data changes and you want to show something different\n// you can change the state by using the built in function this.setState({ stateName: newStateValue })\n\nvar HelloWorld =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(HelloWorld, _React$Component);\n\n  function HelloWorld() {\n    var _this;\n\n    _classCallCheck(this, HelloWorld);\n\n    // call this super() in order to access 'this' later on\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HelloWorld).call(this));\n\n    _this.clicked = function () {\n      _this.setState({\n        value: 'universe'\n      });\n    };\n\n    _this.state = {\n      value: 'world'\n    };\n    return _this;\n  } // defining a funtion that is called whenever the button is clicked\n  // using promise notation () => {} in order to return a function\n\n\n  _createClass(HelloWorld, [{\n    key: \"otherClicked\",\n    // you could also define a function like this but then you would have\n    // to take an additional step to bind 'this' to it so you can call it later on\n    value: function otherClicked() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"Hello \", this.state.value), React.createElement(\"button\", {\n        onClick: this.clicked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \"Change your world\"));\n    }\n  }]);\n\n  return HelloWorld;\n}(React.Component);\n\n; // always have to export the class that you just defined so you can import it when you need\n\nexport default HelloWorld;","map":{"version":3,"sources":["/Users/bryced/repos/WeeklyPlanner/planner/src/components/HelloWorld.js"],"names":["React","HelloWorld","clicked","setState","value","state","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;;IACMC,U;;;;;AACJ,wBAAc;AAAA;;AAAA;;AACZ;AACA;;AAFY,UAWdC,OAXc,GAWJ,YAAM;AACd,YAAKC,QAAL,CAAc;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAd;AACD,KAba;;AAIZ,UAAKC,KAAL,GAAa;AACXD,MAAAA,KAAK,EAAE;AADI,KAAb;AAJY;AAOb,G,CAED;AACA;;;;;AAKA;AACA;mCACe,CAEd;;;6BAEQ;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAU,KAAKC,KAAL,CAAWD,KAArB,CADF,EAGE;AAAQ,QAAA,OAAO,EAAE,KAAKF,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAHF,CADF;AAOD;;;;EA9BsBF,KAAK,CAACM,S;;AA+B9B,C,CAED;;AACA,eAAeL,UAAf","sourcesContent":["import React from 'react';\n\n// This is a stateful component because you can assign this.state a value in the contructor\n// then later on whenever your data changes and you want to show something different\n// you can change the state by using the built in function this.setState({ stateName: newStateValue })\nclass HelloWorld extends React.Component {\n  constructor() {\n    // call this super() in order to access 'this' later on\n    super();\n\n    this.state = {\n      value: 'world'\n    }\n  }\n\n  // defining a funtion that is called whenever the button is clicked\n  // using promise notation () => {} in order to return a function\n  clicked = () => {\n    this.setState({ value: 'universe' })\n  }\n\n  // you could also define a function like this but then you would have\n  // to take an additional step to bind 'this' to it so you can call it later on\n  otherClicked() {\n\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Hello {this.state.value}</p>\n        {/* You can reference a function by calling this.functionName */}\n        <button onClick={this.clicked}>Change your world</button>\n      </div>\n    )\n  }\n};\n\n// always have to export the class that you just defined so you can import it when you need\nexport default HelloWorld;\n"]},"metadata":{},"sourceType":"module"}